CILK_FOR:

A sintaxe do cilk_for tem limitações, pois deve ser possível computar o espaço
de iterações antes de executar o loop. Dessa forma, as seguintes restrições
devem ser seguidas (ver Slide 19 do ISC2012):

- O ÍNDICE ("int i = 0") deve ser do tipo inteiro ou um "iterator" de acesso randômico (ex.:
  um ponteiro).
- A CONDIÇÃO deve ser no formato "ÍNDICE RELOP LIMITE" ou "LIMITE RELOP ÍNDICE", onde:
    * ÍNDICE = um inteiro ou "iterator" de acesso randômico.
    * RELOP = { !=, <, >, >=, <= }.
- O LIMITE e o PASSO devem ser avaliados apenas uma vez (imutáveis?).
- O INCREMENTO (ou decremento) pode ser expressado como:
    * { ÍNDICE += PASSO
      , ÍNDICE -= PASSO
      , ÍNDICE++
      , ++ÍNDICE
      , ÍNDICE--
      , --ÍNDICE
      , ÍNDICE }
- O CORPO do for (iterações) deve poder ser executado em paralelo.


Por padrão, o "cilk_for" divide o espaço de iterações. No entanto, caso seja
necessário maior controle acerca da granularidade do espaço de iterações,
pode-se utilizar o pragma "cilk grainsize", que permite basicamente especificar
quantas iterações serão atribuídas às threads.


CILK_SPAWN:

O "cilk_spawn" denota uma chamada assíncrona de função, fazendo com que a
execução da função chamadora continue. Além disso, o "cilk_spawn" possibilita a
recuperação do valor de retorno da chamada assíncrona.

    x = cilk_spawn f(*p++);

No exemplo acima, será atribuída à variável "x" o resultado da chamada à função "f()"
quando esta retornar.

É importante notar que os argumentos passados para a função criada a partir de
"cilk_spawn" são avaliados antes do "fork".

É possível criar chamadas assíncronas não apenas de funções, mas também de um
conjunto de instruções ("expressões lambda"): 

    cilk_spawn [&]{
        for (int i = 0; i < n; i++)
            a[i] = 0;
    } (); // Não esquecer do "()".
    ...
    cilk_sync


CILK_SYNC:

O "cilk_sync" consiste em um mecanismo de sincronização que se assemelha a
um "join".

O escopo de uma chamada "cilk_sync" é a função inteira na qual foi declarado e
existe uma chamada "cilk_sync" implícita no final de uma função.
 
SERIAL ELISION

- Para se obter a versão serial de um programa Cilk basta eliminar as
  palavras-chave "cilk_spawn", "cilk_sync" e "cilk_for", o que pode ser feito de
  forma trivial como:
    #define cilk_spawn
    #define cilk_sync
    #define cilk_for for

- O resultado é um programa serial C/C++ válido.

HIPEROBJETOS

- Cilk define uma categoria de objetos chamados hiperobjetos, que são aqueles que possibilitam
  o acesso thread-safe a objetos compartilhados dando a cada thread uma instância do objeto.

    REDUTORES:

    A maioria dos hiperobjetos são da categoria redutores.  Cada tipo de redutor fornece uma
    operação de redução que mescla dois views para o redutor. Isso possibilita a utilização 
    de regiões compartilhadas sem o uso de "locks":
        * Funciona para qualquer operação de redução associativa;
        * As operações não precisam ser comutativas;
        * O redutor não tem que ser uma variável local ou mesmo ser uma variável.

    - Exemplo:
        // "sum" não está lexicamente associado a um "loop" em particular.
        cilk::reducer_opadd<float> sum = 0;
        ...
        cilk_for(size_t i = 1; i < n; i++)
            sum += f(i); // Atualiza a soma local.
        ... = sum.get_value(); // get_value() retorna a soma global.

- Hiperojbetos possuem diferentes sintaxes e comportamentos em C e c++ 
	( não sei vale a pena falar muito aqui, só falar que é )


NOTAÇÃO DE MATRIZES E FUNÇÕES ELEMENTARES

- Cilk Plus estende o C e C++ para notação de matrizes e funções elementares, o qual 
  permite ao programador especificar seções da matriz da qual farão acesso. Isso ajuda
  ao compilador na realização de vetorização e autoparalelização. Um detalhe importante
  é que a notação de array não funciona para alocação dinâmica. :(

- A expressão de seção: 
    As expressões de seções selecionam múltiplos arrays de elementos para operações 
    de dados paralela.
    
    A sintaxe é a seguinte:
	[início:tamanho:passo]

    A seqüência de expressões são delimitadas pelos colchetes que é denominada tripla
    (mesmo quando há menos de três expressões). As expressões em um trio são 
    interpretados, respectivamente, como: início, tamanho e passo. Cada trio secção 
    representa uma seqüência de valores subscritos, a partir do início, com n elementos de
    tamanho, onde cada um distancia-se pelo passo como segue:
      inicio, inicio+passo, inicio+passo*2, ..., inicio+passo*(tamanho-1)

    As expressões de seção, deverão seguem as seguintes regras:
      - Se não há passo, o valor do mesmo é 1. 
      - Quanto a tripla não contém expressões, o valor de início é zero e o valor do 
      tamanho é o número de elementos contidos no array. 
      - Se o passo é negativo, o valor de início deverá indica o índice mais alto.
      - Se o tamanho é menor ou igual a zero, a sequencia é vazia.

    Cada expressão possui um rank que ditam as regras de operações que podem ser
    ser realizadas com aquele vetor. ( Não sei se vale a pena explorar todas as regras )

    Dadas as condições de expressões de seção, seguem alguns exemplos utilizando as 
    mesmas:

    int *ponteiro;
    int Matriz[i][j];
    ponteiro[:] = ...	// Não é uma operação válida por não haver tamanho declarado.
    Matriz[:][:] = ... 	// Matriz bidimensional.
    ponteiro[1:5] = ... // ponteiro[1],ponteiro[2], ... ponteiro[5].
    Matriz[0:5][0:7]; 	// Referem-se aos 35 elementos de uma matriz bidimensional.

- Operações com expressões de seção
  - Atribuição
    É uma operação paralela que modifica todos os elemntos da seção da matriz do lado 
    esquerdo.
    Se uma seção do lado direito não casa com a seção do lado esquerdo, a substituição não
    é completa e o comportamento é indefinido:

    Exemplos:
    a[0:10] = a[10:10];		// no overlap; well-defined
    a[0:10:2] = a[1:10:2];	// no overlap; well-defined
    a[0:10] = a[0:10] + 1;	// complete overlap; well-defined
    a[0:10] = a[1:10]; 		// incomplete overlap; undefined

    Exemplos válidos:

    B[0:10] = A[10:20];		// Copia os elementos de 10 a 19 em A 
				// para 0 a 9 em B

    B[0:10][0] = A[0][0:10];	// Transpõe a linha 0, colunas 0-9 de A
				// para a coluna 0, linhas 0-9 de B

    B[0:10][0][0][0:5] = A[3][0:10][0:5][5]; 
				// Copia uma seção da segunda e tereceira dimensão de A
				// para a primeira e quarta dimensão de B

    B[0:5:2] = A[0:5];		// Copia os cinco elementos de A
				// para as posições pares de B


  - Operações aritméticas
    Operações aritméticas em seções de arrays são aplicadas a cada elemento da seção.

    Exemplos:
    
    A[:] = 1.0;				// Todos os elementos de A recebem valor 1.0

    A[0:3][0:3] = B[0]; 	        // A seção 3x3 de A recebe o valor contido em B[0]

    C[:] = A[:] + B[:];			// Soma de cada um de todos os elementos de A e B 
					// salvos em C

    C[20:10] = A[10:10] + B[0:10];	// Soma os elementos de 10 a 19 de A com os
					// elementos de 0 a 9 de B e salva em C nas
					// posições de 20 a 29

    C[20:10][0] = A[10:10][2] + B[0:10][3];	// Exemplo anterior para duas dimensões

    C[0:9][0][0:9] = A[0][0:9][0:9] + B[0:9][0:9][4];	//Exemplo alternando as dimensões

    A[:] *= 2;				// Multiplicando todos elementos de A por 2

    A[:]++;				// Adicionando 1 para todos os elementos de A

    A[:] = B[:] == C[:];		// A é um array de booleanos

    A[0:2][0:2] = B[0:2];		// Erro! O número de dimensões não casa

  - Chamadas de função
    Se uma função é chamada com uma seção de um array como argumento, a função é mapeada
    ou é chamada com os elementos sucessivos desse array.
    Exemplo:

	type fnc(type arg1, type2 arg2);
	type A[N], C[N];
	type2 B[N];
	C[x:y:z] = fnc(A[x:y:z], B[x:y:z]);

    A função fnc é mapeada para a seção do array A e B. A função será então chamada com os
    argumentos (A[x], B[x]), com os argumentos (A[x+z],B[x+z]), etc. E, então, os
    resultados serão coletados para a respectiva seção em C.
    
  - Operações de Redução
    Operações de redução funcionam de forma similar as reduções das hiperoperações e são
    executadas somente para a seção do array.

    Tabela de operações de redução:
	__sec_reduce_add
	__sec_reduce_mul
	__sec_reduce_max
	__sec_reduce_min
	__sec_reduce_max_ind
	__sec_reduce_min_ind
	__sec_reduce_all_zero
	__sec_reduce_all_nonzero
	__sec_reduce_any_zero
	__sec_reduce_any_nonzero

FUNÇÕES ELEMENTARES
  - Funções elementares são construções com funcionamento paralelo de dados. Se dá em três
    etapas:
      - O programador escreve uma função que usa valores escalares de uma operação a ser
        realizada em um único elemento.
      - O programador adiciona um atributo ao vetor, com cláusulas opcionais, para que o 
        compilador gere uma variante vetorizada da função, que irá operar em um vetor de
        elemento de uma única vez.
      - O programador chama a função para para operar em vários valores ao invés de um só.

  - Semântica:
    A semântica de uma função elementar é que a sua ordem de execução é fora de ordem da
    sua sequência de invocação.
    Obs: O compilador gera três versões do código em código de máquina.
      - 1: Versão que opera em um único elemento.
      - 2: Versão para vetores curtos em vários elementos de cada vez.(Varia pelos 
           argumentos)
      - 3: Versão com argumento adicional que é uma máscara para tratar casos onde a 
           chamada de função ocorreu sob um branches na execução.

  - O atributo vector
    É uma atribuição de uso geral, aplicável a funções que aparece de forma diferente em 
    cada plataforma. __declspec(vector), __attribute__, etc.
    Para cada atribuição, uma variação da função vetorizada é criada. 
  - A cláusula processor
    Instrui o compilador a criar uma versão vetorizada da função direcionada para
    determinado processador. 
  - A cláusula vectorlength
    Instrui o compilador que cada chamada local deve executar a computação equivalente a n
    vezes  a execução da função escalar. ( NÃO ENTENDI ESSA )
    (Original: The vectorlength clause tells the compiler that each routine invocation at 
    the call site should execute the computation equivalent to n times the scalar function
    execution.)
  - A cláusula uniform
    Instrui o compilador que tais argumentos podem ser distribuídos para todas as 
    iterações como forma de otimizar o desempenho.
  - A cláusula linear
    Instrui ao compilador que invocações consecutivas seguem padrões em seus parâmetros.
    ( parametro1 no passo 1, parametro 2 no passo 2, etc )
  - A cláusula mask
    Instrui o compilador a gerar uma máscara no vetor da execução.

SIMD LOOPS ( CONFIRMAR COM O GEORGE SE FAZ REALMENTE PARTE DO CILK, OU SE É AUXILIAR )

SIMD é um meio para guiar o compilador a vetorizar loops e funções definidas pelo usuário,
de forma complementar aquelas já feitas automaticamente. A responsabilidade pela
vetorização, nesse caso, é do programador. 

( SE TIVER REALMENTE QUE FALAR, PEGAR MAIS MATERIAL PARA COMPLETAR )
